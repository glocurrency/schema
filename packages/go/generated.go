// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "time"

type EchoEventJson struct {
	// Data corresponds to the JSON schema field "data".
	Data EchoEventJsonData `json:"data" yaml:"data" mapstructure:"data"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`

	// Version corresponds to the JSON schema field "version".
	Version float64 `json:"version" yaml:"version" mapstructure:"version"`
}

type EchoEventJsonData struct {
	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp time.Time `json:"timestamp" yaml:"timestamp" mapstructure:"timestamp"`
}

type TestEventJson struct {
	// Data corresponds to the JSON schema field "data".
	Data TestEventJsonData `json:"data" yaml:"data" mapstructure:"data"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`

	// Version corresponds to the JSON schema field "version".
	Version float64 `json:"version" yaml:"version" mapstructure:"version"`
}

type TestEventJsonData struct {
	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp time.Time `json:"timestamp" yaml:"timestamp" mapstructure:"timestamp"`
}

type VeriffSessionEventJson struct {
	// Data corresponds to the JSON schema field "data".
	Data VeriffSessionEventJsonData `json:"data" yaml:"data" mapstructure:"data"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`

	// Version corresponds to the JSON schema field "version".
	Version float64 `json:"version" yaml:"version" mapstructure:"version"`
}

type VeriffSessionEventJsonData struct {
	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId string `json:"sessionId" yaml:"sessionId" mapstructure:"sessionId"`
}
