#!/bin/bash

set -euo pipefail

VERSION=$(jq -r '.version' packages/typescript/package.json)
echo "üîñ Releasing version: v$VERSION"

echo "üåÄ Running TypeScript codegen..."
pushd packages/typescript > /dev/null
npm run generate
popd > /dev/null

echo "‚öôÔ∏è Running Go codegen..."
if ! command -v go-jsonschema >/dev/null 2>&1; then
  echo "üõ†Ô∏è Installing go-jsonschema..."
  bash ./scripts/install-go-jsonschema.sh
fi
go-jsonschema -p schema -o packages/golang/generated.go --only-models schemas/*.json

echo "üêò Running PHP codegen..."
pushd packages/php > /dev/null
php vendor/bin/s2c generate:fromspec
popd > /dev/null

echo "üì¶ Updating composer.json..."
jq ".version = \"$VERSION\"" packages/php/composer.json > temp.json && mv temp.json packages/php/composer.json

echo "‚úÇÔ∏è Updating .gitignore to include generated files..."
if [[ "$OSTYPE" == "darwin"* ]]; then
  sed -i.bak '/# GENERATED FILES START/,/# GENERATED FILES END/d' .gitignore && rm .gitignore.bak
else
  sed -i '/# GENERATED FILES START/,/# GENERATED FILES END/d' .gitignore
fi

git add .
git commit -m "chore(release): v$VERSION packages"
git tag "v$VERSION"

echo "‚ôªÔ∏è Restoring .gitignore..."
git checkout HEAD -- .gitignore

echo "‚úÖ Release ready: v$VERSION"